{"version":3,"sources":["../../src/Image.js"],"names":["_","React","Image","mounted","state","uri","undefined","options","CacheManager","get","getPath","path","setState","load","props","prevProps","style","defaultSource","tint","otherProps","hasDefaultSource","isImageReady","computedStyle","StyleSheet","absoluteFill","transform","pickBy","flatten","value","key","propsToCopy","indexOf","result","borderWidth","hasPreview","preview","Platform","OS","Component","defaultProps","transitionDuration","black","white"],"mappings":"+1BACA,8B,GAAYA,E,kCACZ,4B,GAAYC,M,iCACZ,yCACA,6DAGA,4C,kiDAeqBC,M,8ZAEjBC,O,CAAU,I,OAOVC,K,CAAQ,CACJC,IAAKC,SADD,C,8GAIID,I,OAAAA,G,qBAAKE,O,CAAAA,O,2BAAU,E,0IACnB,MAAOF,IAAP,GAAe,Q,0EACIG,uBAAaC,GAAb,CAAiBJ,GAAjB,CAAsBE,OAAtB,EAA+BG,OAA/B,E,SAAbC,I,eACN,GAAI,KAAKR,OAAT,CAAkB,CACd,KAAKS,QAAL,CAAc,CAAEP,IAAKM,IAAP,CAAd,EACH,C,qHAIW,CAChB,KAAKE,IAAL,CAAU,KAAKC,KAAf,EACH,C,8DAEkBC,S,CAAuB,CACtC,GAAI,KAAKD,KAAL,CAAWT,GAAX,GAAmBU,UAAUV,GAAjC,CAAsC,CAClC,KAAKQ,IAAL,CAAU,KAAKC,KAAf,EACH,CACJ,C,mEAEsB,CACnB,KAAKX,OAAL,CAAe,KAAf,CACH,C,uCAEoB,YACmC,KAAKW,KADxC,CACVE,KADU,QACVA,KADU,CACHC,aADG,QACHA,aADG,CACYC,IADZ,QACYA,IADZ,CACqBC,UADrB,sEAEVd,IAFU,CAEH,KAAKD,KAFF,CAEVC,GAFU,CAGjB,GAAMe,kBAAmB,CAAC,CAACH,aAA3B,CACA,GAAMI,cAAe,CAAC,CAAChB,GAAvB,CACA,GAAMiB,eAAgB,CAClBC,wBAAWC,YADO,CAElBxB,EAAEyB,SAAF,CACIzB,EAAE0B,MAAF,CAASH,wBAAWI,OAAX,CAAmBX,KAAnB,CAAT,CAAoC,SAACY,KAAD,CAAQC,GAAR,QAAgBC,aAAYC,OAAZ,CAAoBF,GAApB,IAA6B,CAAC,CAA9C,EAApC,CADJ,CAGI,SAACG,MAAD,CAASJ,KAAT,CAAgBC,GAAhB,QAAwB,UAAcG,MAAd,oBAAyBH,GAAzB,CAAgCD,OAASZ,MAAMiB,WAAN,EAAqB,CAA9B,CAAhC,EAAxB,EAHJ,CAFkB,CAAtB,CAQA,MACI,qBAAC,iBAAD,UAAU,CAACjB,WAAD,CAAV,mDAESI,kBAAoB,CAACC,YAAtB,EACI,oBAAC,kBAAD,WACI,OAAQJ,aADZ,CAEI,MAAOK,aAFX,EAGQH,UAHR,mDAHZ,CAWQe,YACI,oBAAC,kBAAD,EACI,OAAQC,OADZ,CAEI,WAAW,OAFf,CAGI,MAAOb,aAHX,CAII,WAAYc,sBAASC,EAAT,GAAgB,SAAhB,CAA4B,GAA5B,CAAkC,CAJlD,iDAZZ,CAqBQhB,cACI,oBAAC,kBAAD,WACI,OAAQ,CAAEhB,OAAF,CADZ,CAEI,MAAOiB,aAFX,EAGQH,UAHR,mDAtBZ,CADJ,CAgCH,C,mBAjF8BlB,MAAMqC,S,SAI9BC,Y,CAAe,CAClBC,mBAAoB,GADF,CAElBtB,KAAM,MAFY,C,yBAJLhB,K,CAoFrB,GAAMuC,OAAQ,OAAd,CACA,GAAMC,OAAQ,OAAd,CACA,GAAMZ,aAAc,CAChB,cADgB,CACA,wBADA,CAC0B,yBAD1B,CACqD,qBADrD,CAC4E,sBAD5E,CAApB","file":"Image.js","sourcesContent":["// @flow\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {Image as RNImage, StyleSheet, View, Platform} from 'react-native';\nimport { type ____ImageStyleProp_Internal as ImageStyle } from 'react-native/Libraries/StyleSheet/StyleSheetTypes';\nimport type {ImageSourcePropType} from 'react-native/Libraries/Image/ImageSourcePropType';\n\nimport CacheManager, {type DownloadOptions} from './CacheManager';\n\ntype ImageProps = {\n    style?: ImageStyle,\n    defaultSource?: ImageSourcePropType,\n    options?: DownloadOptions,\n    uri: string,\n    transitionDuration?: number,\n    tint?: 'dark' | 'light'\n};\n\ntype ImageState = {\n    uri: ?string\n};\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n\n    mounted = true;\n\n    static defaultProps = {\n        transitionDuration: 300,\n        tint: 'dark'\n    };\n\n    state = {\n        uri: undefined,\n    };\n\n    async load({uri, options = {}}: ImageProps): Promise<void> {\n        if (typeof uri === 'string') {\n            const path = await CacheManager.get(uri, options).getPath();\n            if (this.mounted) {\n                this.setState({ uri: path });\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.load(this.props);\n    }\n\n    componentDidUpdate(prevProps: ImageProps) {\n        if (this.props.uri !== prevProps.uri) {\n            this.load(this.props);\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    render(): React.Node {\n        const {style, defaultSource, tint, ...otherProps} = this.props;\n        const {uri} = this.state;\n        const hasDefaultSource = !!defaultSource;\n        const isImageReady = !!uri;\n        const computedStyle = [\n            StyleSheet.absoluteFill,\n            _.transform(\n                _.pickBy(StyleSheet.flatten(style), (value, key) => propsToCopy.indexOf(key) !== -1),\n                // $FlowFixMe\n                (result, value, key) => Object.assign(result, { [key]: (value - (style.borderWidth || 0)) })\n            )\n        ];\n        return (\n            <View {...{style}}>\n                {\n                    (hasDefaultSource && !isImageReady) && (\n                        <RNImage\n                            source={defaultSource}\n                            style={computedStyle}\n                            {...otherProps}\n                        />\n                    )\n                }\n                {\n                    hasPreview && (\n                        <RNImage\n                            source={preview}\n                            resizeMode='cover'\n                            style={computedStyle}\n                            blurRadius={Platform.OS === 'android' ? 0.5 : 0}\n                        />\n                    )\n                }\n                {\n                    isImageReady && (\n                        <RNImage\n                            source={{ uri }}\n                            style={computedStyle}\n                            {...otherProps}\n                        />\n                    )\n                }\n            </View>\n        );\n    }\n}\n\nconst black = 'black';\nconst white = 'white';\nconst propsToCopy = [\n    'borderRadius', 'borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'\n];\n"]}